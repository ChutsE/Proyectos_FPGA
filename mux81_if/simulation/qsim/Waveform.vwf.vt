// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/25/2022 16:45:06"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mux81_if
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux81_if_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] i;
reg [2:0] s;
// wires                                               
wire x;

// assign statements (if any)                          
mux81_if i1 (
// port map - connection between master ports and signals/registers   
	.i(i),
	.s(s),
	.x(x)
);
initial 
begin 
#1000000 $finish;
end 
// i[ 7 ]
always
begin
	i[7] = 1'b0;
	i[7] = #2500 1'b1;
	#2500;
end 
// i[ 6 ]
always
begin
	i[6] = 1'b0;
	i[6] = #5000 1'b1;
	#5000;
end 
// i[ 5 ]
always
begin
	i[5] = 1'b0;
	i[5] = #10000 1'b1;
	#10000;
end 
// i[ 4 ]
always
begin
	i[4] = 1'b0;
	i[4] = #20000 1'b1;
	#20000;
end 
// i[ 3 ]
initial
begin
	repeat(16)
	begin
		i[3] = 1'b0;
		i[3] = #30000 1'b1;
		# 30000;
	end
	i[3] = 1'b0;
	i[3] = #30000 1'b1;
end 
// i[ 2 ]
initial
begin
	repeat(12)
	begin
		i[2] = 1'b0;
		i[2] = #40000 1'b1;
		# 40000;
	end
	i[2] = 1'b0;
end 
// i[ 1 ]
always
begin
	i[1] = 1'b0;
	i[1] = #50000 1'b1;
	#50000;
end 
// i[ 0 ]
initial
begin
	repeat(6)
	begin
		i[0] = 1'b0;
		i[0] = #75000 1'b1;
		# 75000;
	end
	i[0] = 1'b0;
	i[0] = #75000 1'b1;
end 
// s[ 2 ]
initial
begin
	s[2] = 1'b0;
	s[2] = #300000 1'b1;
	s[2] = #300000 1'b0;
	s[2] = #300000 1'b1;
end 
// s[ 1 ]
initial
begin
	repeat(3)
	begin
		s[1] = 1'b0;
		s[1] = #150000 1'b1;
		# 150000;
	end
	s[1] = 1'b0;
end 
// s[ 0 ]
initial
begin
	repeat(6)
	begin
		s[0] = 1'b0;
		s[0] = #75000 1'b1;
		# 75000;
	end
	s[0] = 1'b0;
	s[0] = #75000 1'b1;
end 
endmodule

