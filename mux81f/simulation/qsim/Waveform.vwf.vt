// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/11/2022 16:57:23"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mux81f
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux81f_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a;
reg b;
reg c;
reg d;
reg e;
reg f;
reg g;
reg h;
reg [2:0] s;
// wires                                               
wire o;

// assign statements (if any)                          
mux81f i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.e(e),
	.f(f),
	.g(g),
	.h(h),
	.o(o),
	.s(s)
);
initial 
begin 
#1000000 $finish;
end 

// a
always
begin
	a = 1'b0;
	a = #2500 1'b1;
	#2500;
end 

// b
always
begin
	b = 1'b0;
	b = #5000 1'b1;
	#5000;
end 

// c
always
begin
	c = 1'b0;
	c = #10000 1'b1;
	#10000;
end 

// d
always
begin
	d = 1'b0;
	d = #20000 1'b1;
	#20000;
end 

// e
initial
begin
	repeat(12)
	begin
		e = 1'b0;
		e = #40000 1'b1;
		# 40000;
	end
	e = 1'b0;
end 

// f
initial
begin
	repeat(6)
	begin
		f = 1'b0;
		f = #80000 1'b1;
		# 80000;
	end
	f = 1'b0;
end 

// g
initial
begin
	repeat(3)
	begin
		g = 1'b0;
		g = #160000 1'b1;
		# 160000;
	end
	g = 1'b0;
end 

// h
initial
begin
	h = 1'b0;
	h = #320000 1'b1;
	h = #320000 1'b0;
	h = #320000 1'b1;
end 
// s[ 2 ]
initial
begin
	s[2] = 1'b0;
	s[2] = #640000 1'b1;
end 
// s[ 1 ]
initial
begin
	s[1] = 1'b0;
	s[1] = #320000 1'b1;
	s[1] = #320000 1'b0;
	s[1] = #320000 1'b1;
end 
// s[ 0 ]
initial
begin
	repeat(3)
	begin
		s[0] = 1'b0;
		s[0] = #160000 1'b1;
		# 160000;
	end
	s[0] = 1'b0;
end 
endmodule

