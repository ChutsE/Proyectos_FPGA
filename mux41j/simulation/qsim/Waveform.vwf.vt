// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/04/2022 15:21:37"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mux41j
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux41j_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a;
reg b;
reg c;
reg d;
reg [1:0] s;
// wires                                               
wire x;

// assign statements (if any)                          
mux41j i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.s(s),
	.x(x)
);
initial 
begin 
#1000000 $finish;
end 

// a
always
begin
	a = 1'b0;
	a = #5000 1'b1;
	#5000;
end 

// b
always
begin
	b = 1'b0;
	b = #25000 1'b1;
	#25000;
end 

// c
always
begin
	c = 1'b0;
	c = #50000 1'b1;
	#50000;
end 

// d
always
begin
	d = 1'b0;
	d = #100000 1'b1;
	#100000;
end 
// s[ 1 ]
initial
begin
	s[1] = 1'b0;
	s[1] = #600000 1'b1;
end 
// s[ 0 ]
initial
begin
	s[0] = 1'b0;
	s[0] = #300000 1'b1;
	s[0] = #300000 1'b0;
	s[0] = #300000 1'b1;
end 
endmodule

