// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/25/2022 15:13:45"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          reloj4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module reloj4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg btn1;
reg btn2;
reg clk;
reg rst;
// wires                                               
wire [3:0] dm;
wire [3:0] ds;
wire [3:0] um;
wire [3:0] us;

// assign statements (if any)                          
reloj4 i1 (
// port map - connection between master ports and signals/registers   
	.btn1(btn1),
	.btn2(btn2),
	.clk(clk),
	.dm(dm),
	.ds(ds),
	.rst(rst),
	.um(um),
	.us(us)
);
initial 
begin 
#15000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #10220000 1'b1;
	rst = #20000 1'b0;
end 

// btn1
initial
begin
	btn1 = 1'b0;
	btn1 = #320000 1'b1;
	btn1 = #20000 1'b0;
	btn1 = #520000 1'b1;
	btn1 = #20000 1'b0;
	btn1 = #900000 1'b1;
	btn1 = #20000 1'b0;
	btn1 = #1820000 1'b1;
	btn1 = #20000 1'b0;
	btn1 = #6180000 1'b1;
	btn1 = #20000 1'b0;
	btn1 = #940000 1'b1;
	btn1 = #20000 1'b0;
end 

// btn2
initial
begin
	btn2 = 1'b0;
	btn2 = #120000 1'b1;
	btn2 = #20000 1'b0;
	btn2 = #480000 1'b1;
	btn2 = #20000 1'b0;
	btn2 = #740000 1'b1;
	btn2 = #20000 1'b0;
	btn2 = #3120000 1'b1;
	btn2 = #20000 1'b0;
	btn2 = #3580000 1'b1;
	btn2 = #20000 1'b0;
end 
endmodule

